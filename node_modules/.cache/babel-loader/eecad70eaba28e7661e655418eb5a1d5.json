{"ast":null,"code":"var _jsxFileName = \"/home/2110-010-jra/Developer/academy/training/tv-shows/my-app/src/components/SearchForEpisodes.jsx\",\n    _s = $RefreshSig$();\n\n// component to make search bar\n// search bar made LIVE using .filter \n// made case insensitive using helper function\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SearchForEpisodes({\n  episodes\n}) {\n  _s();\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const handleSearch = event => {\n    setSearchTerm(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"search away!\",\n      value: searchTerm,\n      onChange: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n} //utility function for live search\n\n_s(SearchForEpisodes, \"+YdqPTpSlp4r5CWiFEQiF/UjThM=\");\n\n_c = SearchForEpisodes;\n\nconst filterSearch = (searchTerm, episodes) => {\n  episodes.filter(episode => episodeMatchesSearchTerm(episode, searchTerm));\n}; // function that returns true if search term is in name/summary of episode\n// if it returns true, the filter method will return everything that matches\n\n\nfunction episodeMatchesSearchTerm(episode, searchTerm) {\n  return episode.name.toLowerCase().includes(searchTerm.toLowerCase());\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchForEpisodes\");","map":{"version":3,"sources":["/home/2110-010-jra/Developer/academy/training/tv-shows/my-app/src/components/SearchForEpisodes.jsx"],"names":["useState","SearchForEpisodes","episodes","searchTerm","setSearchTerm","handleSearch","event","target","value","filterSearch","filter","episode","episodeMatchesSearchTerm","name","toLowerCase","includes"],"mappings":";;;AAAA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,eAAe,SAASC,iBAAT,CAA2B;AAACC,EAAAA;AAAD,CAA3B,EAAsC;AAAA;;AACjD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMK,YAAY,GAAIC,KAAD,IAAW;AAC5BF,IAAAA,aAAa,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACL,GAFC;;AAIA,sBACI;AAAA,2BACI;AACA,MAAA,WAAW,EAAC,cADZ;AAEN,MAAA,KAAK,EAAEL,UAFD;AAGN,MAAA,QAAQ,EAAEE;AAHJ;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAQH,C,CAED;;GAjBwBJ,iB;;KAAAA,iB;;AAkBxB,MAAMQ,YAAY,GAAG,CAACN,UAAD,EAAaD,QAAb,KAA0B;AAC3CA,EAAAA,QAAQ,CAACQ,MAAT,CAAiBC,OAAD,IAAcC,wBAAwB,CAACD,OAAD,EAAUR,UAAV,CAAtD;AACF,CAFF,C,CAIA;AACA;;;AACA,SAASS,wBAAT,CAAkCD,OAAlC,EAA2CR,UAA3C,EAAsD;AAClD,SAAOQ,OAAO,CAACE,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,CAAoCZ,UAAU,CAACW,WAAX,EAApC,CAAP;AACH","sourcesContent":["// component to make search bar\n// search bar made LIVE using .filter \n// made case insensitive using helper function\n\nimport { useState } from \"react\"\n\nexport default function SearchForEpisodes({episodes}){\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    const handleSearch = (event) => {\n        setSearchTerm(event.target.value)\n  }\n\n    return (\n        <>\n            <input \n            placeholder=\"search away!\"\n      value={searchTerm}\n      onChange={handleSearch}/>\n        </>\n    )\n}\n\n//utility function for live search\nconst filterSearch = (searchTerm, episodes) => {\n    episodes.filter((episode) => (episodeMatchesSearchTerm(episode, searchTerm))\n)}\n\n// function that returns true if search term is in name/summary of episode\n// if it returns true, the filter method will return everything that matches\nfunction episodeMatchesSearchTerm(episode, searchTerm){\n    return episode.name.toLowerCase().includes(searchTerm.toLowerCase())\n}"]},"metadata":{},"sourceType":"module"}