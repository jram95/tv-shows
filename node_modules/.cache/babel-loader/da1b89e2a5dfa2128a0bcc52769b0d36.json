{"ast":null,"code":"var _jsxFileName = \"/home/2110-010-jra/Developer/academy/training/tv-shows/my-app/src/components/SearchForEpisodes.jsx\",\n    _s = $RefreshSig$();\n\n// component to make search bar\n// search bar made LIVE using .filter \n// made case insensitive using helper function\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SearchForEpisodes({\n  episodes\n}) {\n  _s();\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const handleSearch = event => {\n    setSearchTerm(event.target.value);\n  };\n\n  const filteredResults = filterSearch(episodes, searchTerm);\n  console.log(filteredResults);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"search away!\",\n      value: searchTerm,\n      onChange: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [filteredResults.name, formatSeason(filteredResults.season, filteredResults.number)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n} //utility function for live search\n\n_s(SearchForEpisodes, \"+YdqPTpSlp4r5CWiFEQiF/UjThM=\");\n\n_c = SearchForEpisodes;\n\nfunction filterSearch(episodes, searchTerm) {\n  return episodes.filter(episode => episodeMatchesSearchTerm(episode, searchTerm));\n} // function that returns true if search term is in name/summary of episode\n// if it returns true, the filter method will return everything that matches\n\n\nfunction episodeMatchesSearchTerm(episode, searchTerm) {\n  return contains(episode.name, searchTerm) || contains(episode.summary, searchTerm);\n}\n\nfunction contains(property, searchTerm) {\n  return property.toLowerCase().includes(searchTerm.toLowerCase());\n} // pad season and number\n\n\nfunction formatSeason(season, number) {\n  return `S{season.toString().padStart(2, '0')}E{number.toString().padStart(2, '0')}`;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchForEpisodes\");","map":{"version":3,"sources":["/home/2110-010-jra/Developer/academy/training/tv-shows/my-app/src/components/SearchForEpisodes.jsx"],"names":["useState","SearchForEpisodes","episodes","searchTerm","setSearchTerm","handleSearch","event","target","value","filteredResults","filterSearch","console","log","name","formatSeason","season","number","filter","episode","episodeMatchesSearchTerm","contains","summary","property","toLowerCase","includes"],"mappings":";;;AAAA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,eAAe,SAASC,iBAAT,CAA2B;AAACC,EAAAA;AAAD,CAA3B,EAAsC;AAAA;;AACjD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMK,YAAY,GAAIC,KAAD,IAAW;AAC5BF,IAAAA,aAAa,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACH,GAFD;;AAIA,QAAMC,eAAe,GAAGC,YAAY,CAACR,QAAD,EAAWC,UAAX,CAApC;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYH,eAAZ;AAEA,sBACI;AAAA,4BACA;AACI,MAAA,WAAW,EAAC,cADhB;AAEI,MAAA,KAAK,EAAEN,UAFX;AAGI,MAAA,QAAQ,EAAEE;AAHd;AAAA;AAAA;AAAA;AAAA,YADA,eAMA;AAAA,iBAAKI,eAAe,CAACI,IAArB,EACKC,YAAY,CAACL,eAAe,CAACM,MAAjB,EAAyBN,eAAe,CAACO,MAAzC,CADjB;AAAA;AAAA;AAAA;AAAA;AAAA,YANA;AAAA,kBADJ;AAcH,C,CAED;;GA1BwBf,iB;;KAAAA,iB;;AA2BxB,SAASS,YAAT,CAAsBR,QAAtB,EAAgCC,UAAhC,EAA2C;AACvC,SAAOD,QAAQ,CAACe,MAAT,CAAiBC,OAAD,IAAcC,wBAAwB,CAACD,OAAD,EAAUf,UAAV,CAAtD,CAAP;AACH,C,CAED;AACA;;;AACA,SAASgB,wBAAT,CAAkCD,OAAlC,EAA2Cf,UAA3C,EAAsD;AAClD,SAAOiB,QAAQ,CAACF,OAAO,CAACL,IAAT,EAAeV,UAAf,CAAR,IAAsCiB,QAAQ,CAACF,OAAO,CAACG,OAAT,EAAkBlB,UAAlB,CAArD;AACH;;AAED,SAASiB,QAAT,CAAkBE,QAAlB,EAA4BnB,UAA5B,EAAuC;AACnC,SAAOmB,QAAQ,CAACC,WAAT,GAAuBC,QAAvB,CAAgCrB,UAAU,CAACoB,WAAX,EAAhC,CAAP;AACH,C,CAED;;;AACA,SAAST,YAAT,CAAsBC,MAAtB,EAA8BC,MAA9B,EAAqC;AACjC,SACK,4EADL;AAGH","sourcesContent":["// component to make search bar\n// search bar made LIVE using .filter \n// made case insensitive using helper function\n\nimport { useState } from \"react\"\n\nexport default function SearchForEpisodes({episodes}){\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    const handleSearch = (event) => {\n        setSearchTerm(event.target.value)\n    }\n\n    const filteredResults = filterSearch(episodes, searchTerm)\n    console.log(filteredResults)\n\n    return (\n        <>\n        <input \n            placeholder=\"search away!\"\n            value={searchTerm}\n            onChange={handleSearch}\n        />\n        <h1>{filteredResults.name} \n            {formatSeason(filteredResults.season, filteredResults.number)}\n        </h1>\n        {/* <img src={filteredResults.image.medium} alt={\"Game of Thrones related\"}/> */}\n        {/* <p>{filteredResults.summary.slice(3,-4)}</p>  */}\n        </>\n    )\n}\n\n//utility function for live search\nfunction filterSearch(episodes, searchTerm){\n    return episodes.filter((episode) => (episodeMatchesSearchTerm(episode, searchTerm)))\n}\n\n// function that returns true if search term is in name/summary of episode\n// if it returns true, the filter method will return everything that matches\nfunction episodeMatchesSearchTerm(episode, searchTerm){\n    return contains(episode.name, searchTerm) || contains(episode.summary, searchTerm)\n}\n\nfunction contains(property, searchTerm){\n    return property.toLowerCase().includes(searchTerm.toLowerCase())\n}\n\n// pad season and number\nfunction formatSeason(season, number){\n    return (\n        `S{season.toString().padStart(2, '0')}E{number.toString().padStart(2, '0')}`\n    )\n}"]},"metadata":{},"sourceType":"module"}